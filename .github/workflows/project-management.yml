name: Project Management Automation

on:
  issues:
    types: [opened, closed, reopened]
  pull_request:
    types: [opened, closed, ready_for_review]

jobs:
  update-project:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      repository-projects: write
    
    steps:
      - name: Add issue to project
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/users/bmf-san/projects/3
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Move issue to In Progress when PR opened
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            // Get linked issues from PR body
            const prBody = context.payload.pull_request.body || '';
            const issueMatches = prBody.match(/(Fixes|Closes|Resolves) #(\d+)/gi);
            
            if (issueMatches) {
              console.log('Found linked issues:', issueMatches);
              // Here you would add logic to update project status
              // This requires additional setup with GitHub Projects API
            }

      - name: Move issue to Done when PR merged
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          script: |
            // Get linked issues from PR body
            const prBody = context.payload.pull_request.body || '';
            const issueMatches = prBody.match(/(Fixes|Closes|Resolves) #(\d+)/gi);
            
            if (issueMatches) {
              console.log('PR merged, moving linked issues to Done');
              // Here you would add logic to update project status
            }

  project-metrics:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Generate project metrics
        uses: actions/github-script@v7
        with:
          script: |
            // Generate weekly project metrics
            const now = new Date();
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            // Query issues closed this week
            const { data: closedIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              since: weekAgo.toISOString(),
            });
            
            console.log(`Issues closed this week: ${closedIssues.length}`);
            
            // Additional metrics can be added here
